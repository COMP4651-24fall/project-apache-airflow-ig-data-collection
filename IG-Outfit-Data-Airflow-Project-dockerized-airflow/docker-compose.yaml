# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME         - Docker image name used to run Airflow.
#                              Default: apache/airflow:master-python3.8
# AIRFLOW_UID                - User ID in Airflow containers
#                              Default: 50000
# AIRFLOW_GID                - Group ID in Airflow containers
#                              Default: 50000
# _AIRFLOW_WWW_USER_USERNAME - Username for the administrator account.
#                              Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD - Password for the administrator account.
#                              Default: airflow
#
# Feel free to modify this file to suit your needs.
---
version: '3'
x-airflow-common:
  &airflow-common
  #image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:latest}
  image: ${AIRFLOW_IMAGE_NAME:-my-airflow}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    #AIRFLOW__CORE__EXECUTOR: SequentialExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow_cfg:airflow_cfg@postgres_cfg:5432/airflow_cfg
    #AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql+psycopg2://airflow:airflow@localhost:6379/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow_cfg:airflow_cfg@postgres_cfg:5432/airflow_cfg
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: 'myfernetkey'
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "True"
    AIRFLOW__WEBSERVER__SHOW_TRIGGER_FORM_IF_NO_PARAMS: 'True'
    # AIRFLOW__SMTP__SMTP_HOST: ''
    # AIRFLOW__SMTP__SMTP_PORT: ''
    #AIRFLOW__CELERY__WORKER_MAX_TASKS_PER_CHILD: "1"
    AIRFLOW__CELERY__WORKER_MAX_MEMORY_PER_CHILD: "300000000"
    AIRFLOW__CELERY__WORKER_AUTOSCALE: "0,4"
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./scripts:/opt/airflow/scripts
    - ./data:/opt/airflow/data  
    # - ../dbt-core:/opt/airflow/dbt-core
  depends_on:
    redis:
      condition: service_healthy
    postgres_cfg:
      condition: service_healthy

services:
  postgres_cfg:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow_cfg
      POSTGRES_PASSWORD: airflow_cfg
      POSTGRES_DB: airflow_cfg
    ports:
      - 5432:5432
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow_cfg"]
      interval: 5s
      retries: 5
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
  # git-sync:
  #   image: k8s.gcr.io/git-sync/git-sync:v4.0.0
  #   user: root
  #   restart: always
  #   secrets:
  #     - git-sync-password
  #   environment:
  #     GITSYNC_REPO: "https://github.com/DarrenenT/IG-Outfit-Data-Airflow-Project.git"
  #     GIT_SYNC_BRANCH: "dockerized-airflow"
  #     GIT_SYNC_DEST: ""
  #     GITSYNC_PERIOD: "5s"
  #     GITSYNC_WAIT: "5" 
  #     GITSYNC_USERNAME: "DarrenenT"
  #     GITSYNC_PASSWORD: "/run/secrets/git-sync-password"
  #     GIT_SYNC_SSH: "false"
  #     GITSYNC_VERBOSE: "1"
  #   # volumes: # Mounting volumes into the git-sync container
  #   #   - ./dags:/git/dags
  #   #   - ./scripts:/git/scripts  
  #   #   - ./docker-compose.yaml:/git/docker-compose.yaml 
  #   #   - ./dockerfile:/git/dockerfile
  #   #   - ./requirements.txt:/git/requirements.txt
  #   volumes:
  #     - ./repo:/git
  redis:
    image: redis:latest
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always

  airflow-worker-1:
    <<: *airflow-common
    command: celery worker
    restart: always
  airflow-worker-2:
    <<: *airflow-common
    command: celery worker
    restart: always
  airflow-trigger:
    <<: *airflow-common
    command: triggerer
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}

  flower:
    <<: *airflow-common
    command: celery flower
    ports:
     - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

volumes:
  postgres-db-volume:
# secrets:
#   git-sync-password:
#     file: ./git-sync-password.txt